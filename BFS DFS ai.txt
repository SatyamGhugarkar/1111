BFS 

from collections import deque

def bfs(graph, start):
    visited = set()
    queue = deque([start])
    visited.add(start)

    while queue:
        vertex = queue.popleft()
        print(vertex)  # Process the vertex (e.g., print it)

        for neighbor in graph[vertex]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)

# Function to get graph input from user
def input_graph():
    graph = {}
    n = int(input("Enter the number of edges: "))
    
    for _ in range(n):
        edge = input("Enter an edge (e.g., A B): ").split()
        u, v = edge[0], edge[1]
        
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        
        graph[u].append(v)
        graph[v].append(u)  # Assuming it's an undirected graph

    return graph

if __name__ == "__main__":
    graph = input_graph()
    start_vertex = input("Enter the starting vertex: ")

    print(f"BFS starting from vertex {start_vertex}:")
    bfs(graph, start_vertex)


Output
Enter the number of edges: 2
Enter an edge (e.g., A B): a b
Enter an edge (e.g., A B): c d
Enter the starting vertex: c
BFS starting from vertex c:
c
d




DFS


def dfs(graph, vertex, visited):
    # Mark the current node as visited
    visited.add(vertex)
    print(vertex)  # Process the vertex (e.g., print it)

    # Recur for all the vertices adjacent to this vertex
    for neighbor in graph[vertex]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)

# Function to get graph input from user
def input_graph():
    graph = {}
    n = int(input("Enter the number of edges: "))
    
    for _ in range(n):
        edge = input("Enter an edge (as two space-separated vertices): ").split()
        u, v = int(edge[0]), int(edge[1])
        
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        
        graph[u].append(v)
        graph[v].append(u)  # Assuming it's an undirected graph

    return graph

if __name__ == "__main__":
    graph = input_graph()  # Use input_graph() correctly
    start_vertex = int(input("Enter the starting vertex: "))

    print(f"DFS starting from vertex {start_vertex}:")
    visited = set()
    dfs(graph, start_vertex, visited)





output
Enter the number of edges: 3
Enter an edge (as two space-separated vertices): 1 2
Enter an edge (as two space-separated vertices): 1 3
Enter an edge (as two space-separated vertices): 1 4
Enter the starting vertex: 1
DFS starting from vertex 1:
1
2
3
4

